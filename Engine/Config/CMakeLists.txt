set(Config_DIR ${CMAKE_CURRENT_LIST_DIR})

project(Config)
file(GLOB_RECURSE Config_Sources "${Config_DIR}/*.h")
add_library(Config INTERFACE ${Config_Sources})
target_include_directories(Config
        INTERFACE
        "${Config_DIR}"
)

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(ENGINE_BUILD_DEBUG ON)
else()
    set(ENGINE_BUILD_RELEASE ON)
endif()

if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(ENGINE_BUILD_DEBUG ON)
else()
    set(ENGINE_BUILD_RELEASE ON)
endif()

set(C_COMPILER_ID ${CMAKE_C_COMPILER_ID})
set(CXX_COMPILER_ID ${CMAKE_CXX_COMPILER_ID})

set(ENGINE_NAME ${CMAKE_PROJECT_NAME})
set(ENGINE_VERSION ${CMAKE_PROJECT_VERSION})

if (DEFINED CMAKE_PROJECT_VERSION_MAJOR)
    set(ENGINE_VERSION_MAJOR ${CMAKE_PROJECT_VERSION_MAJOR})
else()
    set(ENGINE_VERSION_MAJOR ON)
endif()

if (CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    set(HOST_SYSTEM_WINDOWS ON)
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
    set(HOST_SYSTEM_LINUX ON)
elseif (CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin")
    set(HOST_SYSTEM_DARWIN ON)
endif()

if(CMAKE_SYSTEM_PROCESSOR MATCHES "(x86_64)|(amd64)|(AMD64)")
    set(HOST_ARCH_X64 ON)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "(aarch64)|(arm64)|(AARCH64)|(ARM64)")
    set(HOST_ARCH_ARM64 ON)
endif()


if (DEFINED CMAKE_PROJECT_VERSION_PATCH)
    set(ENGINE_VERSION_PATCH ${CMAKE_PROJECT_VERSION_PATCH})
else()
    set(ENGINE_VERSION_PATCH 0)
endif()

configure_file(${Config_DIR}/Config.h.in ${Config_DIR}/Config.h @ONLY)